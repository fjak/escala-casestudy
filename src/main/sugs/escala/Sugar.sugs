package escala

import concretesyntax.Scala

sugar Sugar {
	context-free syntax
		"imperative" "evt" ScalaId ScalaTypeParamClause
			-> ScalaTemplateStat {cons("ImperativeEvt")}

		"evt" ScalaId ScalaTypeParamClause? "=" ScalaExpr
			-> ScalaTemplateStat {cons("Evt")}

		"observable" "def" ScalaFunDef
			-> ScalaTemplateStat {cons("ObservableDef")}

		"afterExec"  "(" ScalaId ")" -> ScalaExpr {cons("AfterExec")}
		"beforeExec" "(" ScalaId ")" -> ScalaExpr {cons("BeforeExec")}

		"afterExec"  -> ScalaPlainId {reject}
		"beforeExec" -> ScalaPlainId {reject}
		"observable" -> ScalaPlainId {reject}
		"evt"        -> ScalaPlainId {reject}
		"imperative" -> ScalaPlainId {reject}

	desugarings
		desugar-escala

	rules
		desugar-escala =
			desugar-escala-implicits-import
			; innermost(desugar-escala-nodes)

		desugar-escala-implicits-import:
			TemplateBody([|body]) -> TemplateBody([import|body])
			where import := |[ import scala.events.EventsLibConversions._; ]|
				; <not(elem)> (import, body)
				; <uses-escala> body

		uses-escala =
			oncetd(
				?AfterExec(_)
				+ ?BeforeExec(_)
				+ ?ImperativeEvt(_, _)
				+ ?Evt(_, _, _)
				+ ?ObservableDef(_))

		desugar-escala-nodes =
			desugar-after-exec
			<+ desugar-before-exec
			<+ desugar-imperative-evt
			<+ desugar-evt
			<+ desugar-observable-def

		desugar-after-exec:
			AfterExec(name) -> DesignatorExpr(name, Id("after"))

		desugar-before-exec:
			BeforeExec(name) -> DesignatorExpr(name, Id("before"))

		desugar-imperative-evt:
			ImperativeEvt(name, type) -> |[ lazy val :${name} = new scala.events.ImperativeEvent :${type} ]|

		desugar-evt:
			Evt(name, type, expr) -> |[ lazy val :${name} = :${expr} ]|

		desugar-observable-def:
			[obs_def|rst] -> <flatten-list> <map(desugar-observable-def-proc <+ id)> [obs_def|rst]
			where
				<oncetd(?ObservableDef(_))> [obs_def|rst]

		desugar-observable-def-proc:
			TemplateStatSemi(
				ObservableDef(
					ProcDef(
						FunSig(Id(name), typeParamClause, paramClause),
						blk)),
				semi)
			->
			[TemplateStatSemi(
				FunDefDef(
					ProcDef(
						FunSig(
							Id(<escala-syn> name),
							typeParamClause,
							paramClause),
						blk)),
				semi)
			,TemplateStatSemi(|[ lazy val :${name} = scala.events.Observable(:${<escala-syn> name}) ]|, semi)]

		desugar-observable-def-proc:
			TemplateStatSemi(
				ObservableDef(
					FunDef(
						FunSig(Id(name), typeParamClause, paramClause),
						typed,
						expr)),
				semi)
			->
			[TemplateStatSemi(
				FunDefDef(
					FunDef(
						FunSig(
							Id(<escala-syn> name),
							typeParamClause,
							paramClause),
						typed,
						expr)),
				semi)
			,TemplateStatSemi(|[ lazy val :${name} = scala.events.Observable(:${<escala-syn> name}) ]|, semi)]

		escala-syn = ?name; <strcat>("$escala_syn$", name)
}
